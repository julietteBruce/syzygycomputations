--This file computes Betti tables for P^2 for d = 8 and b = 6
A := QQ[t_0,t_1,t_2];
--tb stands for Total Betti numbers
tb86 = new HashTable from {(7,0) => 0, (6,1) => 0, (7,1) => 1, (0,0) => 7, (0,1) => 0, (1,0) => 48, (2,0) => 140, (1,1) => 0, (2,1) => 0, (3,0) => 224, (3,1) => 0, (4,0) => 210, (4,1) => 0, (5,0) => 112, (6,0) => 28, (5,1) => 0};
--mb stands for Multigraded Betti numbers
mb86 = new HashTable from {(7,0) => 0, (6,1) => 0, (7,1) => t_0^35*t_1^35, (0,0) => t_0^6+t_0^5*t_1+t_0^4*t_1^2+t_0^3*t_1^3+t_0^2*t_1^4+t_0*t_1^5+t_1^6, (1,0) => t_0^13*t_1+2*t_0^12*t_1^2+3*t_0^11*t_1^3+4*t_0^10*t_1^4+5*t_0^9*t_1^5+6*t_0^8*t_1^6+6*t_0^7*t_1^7+6*t_0^6*t_1^8+5*t_0^5*t_1^9+4*t_0^4*t_1^10+3*t_0^3*t_1^11+2*t_0^2*t_1^12+t_0*t_1^13, (0,1) => 0, (2,0) => t_0^19*t_1^3+2*t_0^18*t_1^4+4*t_0^17*t_1^5+6*t_0^16*t_1^6+9*t_0^15*t_1^7+11*t_0^14*t_1^8+14*t_0^13*t_1^9+15*t_0^12*t_1^10+16*t_0^11*t_1^11+15*t_0^10*t_1^12+14*t_0^9*t_1^13+11*t_0^8*t_1^14+9*t_0^7*t_1^15+6*t_0^6*t_1^16+4*t_0^5*t_1^17+2*t_0^4*t_1^18+t_0^3*t_1^19, (1,1) => 0, (2,1) => 0, (3,0) => t_0^24*t_1^6+2*t_0^23*t_1^7+4*t_0^22*t_1^8+7*t_0^21*t_1^9+10*t_0^20*t_1^10+14*t_0^19*t_1^11+18*t_0^18*t_1^12+21*t_0^17*t_1^13+23*t_0^16*t_1^14+24*t_0^15*t_1^15+23*t_0^14*t_1^16+21*t_0^13*t_1^17+18*t_0^12*t_1^18+14*t_0^11*t_1^19+10*t_0^10*t_1^20+7*t_0^9*t_1^21+4*t_0^8*t_1^22+2*t_0^7*t_1^23+t_0^6*t_1^24, (3,1) => 0, (4,0) => t_0^28*t_1^10+2*t_0^27*t_1^11+4*t_0^26*t_1^12+6*t_0^25*t_1^13+10*t_0^24*t_1^14+13*t_0^23*t_1^15+17*t_0^22*t_1^16+19*t_0^21*t_1^17+22*t_0^20*t_1^18+22*t_0^19*t_1^19+22*t_0^18*t_1^20+19*t_0^17*t_1^21+17*t_0^16*t_1^22+13*t_0^15*t_1^23+10*t_0^14*t_1^24+6*t_0^13*t_1^25+4*t_0^12*t_1^26+2*t_0^11*t_1^27+t_0^10*t_1^28, (5,0) => t_0^31*t_1^15+2*t_0^30*t_1^16+3*t_0^29*t_1^17+5*t_0^28*t_1^18+7*t_0^27*t_1^19+9*t_0^26*t_1^20+11*t_0^25*t_1^21+12*t_0^24*t_1^22+12*t_0^23*t_1^23+12*t_0^22*t_1^24+11*t_0^21*t_1^25+9*t_0^20*t_1^26+7*t_0^19*t_1^27+5*t_0^18*t_1^28+3*t_0^17*t_1^29+2*t_0^16*t_1^30+t_0^15*t_1^31, (4,1) => 0, (5,1) => 0, (6,0) => t_0^33*t_1^21+t_0^32*t_1^22+2*t_0^31*t_1^23+2*t_0^30*t_1^24+3*t_0^29*t_1^25+3*t_0^28*t_1^26+4*t_0^27*t_1^27+3*t_0^26*t_1^28+3*t_0^25*t_1^29+2*t_0^24*t_1^30+2*t_0^23*t_1^31+t_0^22*t_1^32+t_0^21*t_1^33};
--sb represents the betti numbers as sums of Schur functors
sb86 = new HashTable from {(7,0) => {}, (6,1) => {}, (7,1) => {({35,35},1)}, (0,0) => {({6,0},1)}, (0,1) => {}, (1,0) => {({13,1},1)}, (2,0) => {({19,3},1)}, (1,1) => {}, (2,1) => {}, (3,0) => {({24,6},1)}, (3,1) => {}, (4,0) => {({28,10},1)}, (4,1) => {}, (5,0) => {({31,15},1)}, (6,0) => {({33,21},1)}, (5,1) => {}};
--dw encodes the dominant weights in each entry
dw86 = new HashTable from {(7,0) => {}, (6,1) => {}, (7,1) => {{35,35}}, (0,0) => {{6,0}}, (0,1) => {}, (1,0) => {{13,1}}, (2,0) => {{19,3}}, (1,1) => {}, (2,1) => {}, (3,0) => {{24,6}}, (3,1) => {}, (4,0) => {{28,10}}, (4,1) => {}, (5,0) => {{31,15}}, (6,0) => {{33,21}}, (5,1) => {}};
--lw encodes the lex leading weight in each entry
lw86 = new HashTable from {(7,0) => {}, (6,1) => {}, (7,1) => {35,35}, (0,0) => {6,0}, (0,1) => {}, (1,0) => {13,1}, (2,0) => {19,3}, (1,1) => {}, (2,1) => {}, (3,0) => {24,6}, (3,1) => {}, (4,0) => {28,10}, (4,1) => {}, (5,0) => {31,15}, (6,0) => {33,21}, (5,1) => {}};
--nr encodes the number of disctinct reprsentations in each entry
nr86 = new HashTable from {(7,0) => 0, (6,1) => 0, (7,1) => 1, (0,0) => 1, (0,1) => 0, (1,0) => 1, (2,0) => 1, (1,1) => 0, (2,1) => 0, (3,0) => 1, (3,1) => 0, (4,0) => 1, (4,1) => 0, (5,0) => 1, (6,0) => 1, (5,1) => 0};
--nrm encodes the number of representations with multiplicity in each entry
nrm86 = new HashTable from {(7,0) => 0, (6,1) => 0, (7,1) => 1, (0,0) => 1, (0,1) => 0, (1,0) => 1, (2,0) => 1, (1,1) => 0, (2,1) => 0, (3,0) => 1, (3,1) => 0, (4,0) => 1, (4,1) => 0, (5,0) => 1, (6,0) => 1, (5,1) => 0};
--er encodes the errors in the computed multigraded Hilbert series via our Schur method in each entry
er86 = new HashTable from {(7,0) => 0, (6,1) => 0, (7,1) => 0, (0,0) => 0, (0,1) => 0, (1,0) => 0, (2,0) => 0, (1,1) => 0, (2,1) => 0, (3,0) => 0, (3,1) => 0, (4,0) => 0, (4,1) => 0, (5,0) => 0, (6,0) => 0, (5,1) => 0};
--bs encodes the Boij-Soederberg coefficients each entry
bs86 = {40320/1};
end;