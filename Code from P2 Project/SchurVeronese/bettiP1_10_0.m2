--This file computes Betti tables for P^2 for d = 10 and b = 0
A := QQ[t_0,t_1,t_2];
--tb stands for Total Betti numbers
tb100 = new HashTable from {(7,0) => 0, (6,1) => 720, (8,0) => 0, (7,1) => 315, (9,0) => 0, (8,1) => 80, (9,1) => 9, (0,0) => 1, (0,1) => 0, (1,0) => 0, (2,0) => 0, (1,1) => 45, (2,1) => 240, (3,0) => 0, (3,1) => 630, (4,0) => 0, (4,1) => 1008, (5,0) => 0, (6,0) => 0, (5,1) => 1050};
--mb stands for Multigraded Betti numbers
mb100 = new HashTable from {(7,0) => 0, (6,1) => t_0^48*t_1^22+2*t_0^47*t_1^23+4*t_0^46*t_1^24+7*t_0^45*t_1^25+11*t_0^44*t_1^26+16*t_0^43*t_1^27+22*t_0^42*t_1^28+29*t_0^41*t_1^29+36*t_0^40*t_1^30+43*t_0^39*t_1^31+49*t_0^38*t_1^32+54*t_0^37*t_1^33+57*t_0^36*t_1^34+58*t_0^35*t_1^35+57*t_0^34*t_1^36+54*t_0^33*t_1^37+49*t_0^32*t_1^38+43*t_0^31*t_1^39+36*t_0^30*t_1^40+29*t_0^29*t_1^41+22*t_0^28*t_1^42+16*t_0^27*t_1^43+11*t_0^26*t_1^44+7*t_0^25*t_1^45+4*t_0^24*t_1^46+2*t_0^23*t_1^47+t_0^22*t_1^48, (7,1) => t_0^51*t_1^29+2*t_0^50*t_1^30+4*t_0^49*t_1^31+6*t_0^48*t_1^32+9*t_0^47*t_1^33+12*t_0^46*t_1^34+16*t_0^45*t_1^35+19*t_0^44*t_1^36+23*t_0^43*t_1^37+25*t_0^42*t_1^38+27*t_0^41*t_1^39+27*t_0^40*t_1^40+27*t_0^39*t_1^41+25*t_0^38*t_1^42+23*t_0^37*t_1^43+19*t_0^36*t_1^44+16*t_0^35*t_1^45+12*t_0^34*t_1^46+9*t_0^33*t_1^47+6*t_0^32*t_1^48+4*t_0^31*t_1^49+2*t_0^30*t_1^50+t_0^29*t_1^51, (8,0) => 0, (8,1) => t_0^53*t_1^37+2*t_0^52*t_1^38+3*t_0^51*t_1^39+4*t_0^50*t_1^40+5*t_0^49*t_1^41+6*t_0^48*t_1^42+7*t_0^47*t_1^43+8*t_0^46*t_1^44+8*t_0^45*t_1^45+8*t_0^44*t_1^46+7*t_0^43*t_1^47+6*t_0^42*t_1^48+5*t_0^41*t_1^49+4*t_0^40*t_1^50+3*t_0^39*t_1^51+2*t_0^38*t_1^52+t_0^37*t_1^53, (9,0) => 0, (9,1) => t_0^54*t_1^46+t_0^53*t_1^47+t_0^52*t_1^48+t_0^51*t_1^49+t_0^50*t_1^50+t_0^49*t_1^51+t_0^48*t_1^52+t_0^47*t_1^53+t_0^46*t_1^54, (0,0) => 1, (0,1) => 0, (1,0) => 0, (2,0) => 0, (1,1) => t_0^18*t_1^2+t_0^17*t_1^3+2*t_0^16*t_1^4+2*t_0^15*t_1^5+3*t_0^14*t_1^6+3*t_0^13*t_1^7+4*t_0^12*t_1^8+4*t_0^11*t_1^9+5*t_0^10*t_1^10+4*t_0^9*t_1^11+4*t_0^8*t_1^12+3*t_0^7*t_1^13+3*t_0^6*t_1^14+2*t_0^5*t_1^15+2*t_0^4*t_1^16+t_0^3*t_1^17+t_0^2*t_1^18, (3,0) => 0, (2,1) => t_0^26*t_1^4+2*t_0^25*t_1^5+3*t_0^24*t_1^6+5*t_0^23*t_1^7+7*t_0^22*t_1^8+9*t_0^21*t_1^9+12*t_0^20*t_1^10+15*t_0^19*t_1^11+17*t_0^18*t_1^12+19*t_0^17*t_1^13+20*t_0^16*t_1^14+20*t_0^15*t_1^15+20*t_0^14*t_1^16+19*t_0^13*t_1^17+17*t_0^12*t_1^18+15*t_0^11*t_1^19+12*t_0^10*t_1^20+9*t_0^9*t_1^21+7*t_0^8*t_1^22+5*t_0^7*t_1^23+3*t_0^6*t_1^24+2*t_0^5*t_1^25+t_0^4*t_1^26, (4,0) => 0, (3,1) => t_0^33*t_1^7+2*t_0^32*t_1^8+4*t_0^31*t_1^9+6*t_0^30*t_1^10+10*t_0^29*t_1^11+14*t_0^28*t_1^12+20*t_0^27*t_1^13+25*t_0^26*t_1^14+32*t_0^25*t_1^15+37*t_0^24*t_1^16+43*t_0^23*t_1^17+46*t_0^22*t_1^18+50*t_0^21*t_1^19+50*t_0^20*t_1^20+50*t_0^19*t_1^21+46*t_0^18*t_1^22+43*t_0^17*t_1^23+37*t_0^16*t_1^24+32*t_0^15*t_1^25+25*t_0^14*t_1^26+20*t_0^13*t_1^27+14*t_0^12*t_1^28+10*t_0^11*t_1^29+6*t_0^10*t_1^30+4*t_0^9*t_1^31+2*t_0^8*t_1^32+t_0^7*t_1^33, (5,0) => 0, (4,1) => t_0^39*t_1^11+2*t_0^38*t_1^12+4*t_0^37*t_1^13+7*t_0^36*t_1^14+11*t_0^35*t_1^15+17*t_0^34*t_1^16+24*t_0^33*t_1^17+32*t_0^32*t_1^18+41*t_0^31*t_1^19+50*t_0^30*t_1^20+59*t_0^29*t_1^21+67*t_0^28*t_1^22+73*t_0^27*t_1^23+77*t_0^26*t_1^24+78*t_0^25*t_1^25+77*t_0^24*t_1^26+73*t_0^23*t_1^27+67*t_0^22*t_1^28+59*t_0^21*t_1^29+50*t_0^20*t_1^30+41*t_0^19*t_1^31+32*t_0^18*t_1^32+24*t_0^17*t_1^33+17*t_0^16*t_1^34+11*t_0^15*t_1^35+7*t_0^14*t_1^36+4*t_0^13*t_1^37+2*t_0^12*t_1^38+t_0^11*t_1^39, (5,1) => t_0^44*t_1^16+2*t_0^43*t_1^17+4*t_0^42*t_1^18+7*t_0^41*t_1^19+12*t_0^40*t_1^20+17*t_0^39*t_1^21+25*t_0^38*t_1^22+33*t_0^37*t_1^23+43*t_0^36*t_1^24+52*t_0^35*t_1^25+62*t_0^34*t_1^26+69*t_0^33*t_1^27+77*t_0^32*t_1^28+80*t_0^31*t_1^29+82*t_0^30*t_1^30+80*t_0^29*t_1^31+77*t_0^28*t_1^32+69*t_0^27*t_1^33+62*t_0^26*t_1^34+52*t_0^25*t_1^35+43*t_0^24*t_1^36+33*t_0^23*t_1^37+25*t_0^22*t_1^38+17*t_0^21*t_1^39+12*t_0^20*t_1^40+7*t_0^19*t_1^41+4*t_0^18*t_1^42+2*t_0^17*t_1^43+t_0^16*t_1^44, (6,0) => 0};
--sb represents the betti numbers as sums of Schur functors
sb100 = new HashTable from {(7,0) => {}, (6,1) => {({48,22},1)}, (8,0) => {}, (7,1) => {({51,29},1)}, (9,0) => {}, (8,1) => {({53,37},1)}, (9,1) => {({54,46},1)}, (0,0) => {({0,0},1)}, (0,1) => {}, (1,0) => {}, (2,0) => {}, (1,1) => {({18,2},1)}, (2,1) => {({26,4},1)}, (3,0) => {}, (3,1) => {({33,7},1)}, (4,0) => {}, (4,1) => {({39,11},1)}, (5,0) => {}, (6,0) => {}, (5,1) => {({44,16},1)}};
--dw encodes the dominant weights in each entry
dw100 = new HashTable from {(7,0) => {}, (6,1) => {{48,22}}, (8,0) => {}, (7,1) => {{51,29}}, (9,0) => {}, (8,1) => {{53,37}}, (9,1) => {{54,46}}, (0,0) => {{0,0}}, (0,1) => {}, (1,0) => {}, (2,0) => {}, (1,1) => {{18,2}}, (2,1) => {{26,4}}, (3,0) => {}, (3,1) => {{33,7}}, (4,0) => {}, (4,1) => {{39,11}}, (5,0) => {}, (6,0) => {}, (5,1) => {{44,16}}};
--lw encodes the lex leading weight in each entry
lw100 = new HashTable from {(7,0) => {}, (6,1) => {48,22}, (8,0) => {}, (7,1) => {51,29}, (9,0) => {}, (8,1) => {53,37}, (9,1) => {54,46}, (0,0) => {0,0}, (0,1) => {}, (1,0) => {}, (2,0) => {}, (1,1) => {18,2}, (2,1) => {26,4}, (3,0) => {}, (3,1) => {33,7}, (4,0) => {}, (4,1) => {39,11}, (5,0) => {}, (6,0) => {}, (5,1) => {44,16}};
--nr encodes the number of disctinct reprsentations in each entry
nr100 = new HashTable from {(7,0) => 0, (6,1) => 1, (8,0) => 0, (7,1) => 1, (9,0) => 0, (8,1) => 1, (9,1) => 1, (0,0) => 1, (0,1) => 0, (1,0) => 0, (2,0) => 0, (1,1) => 1, (2,1) => 1, (3,0) => 0, (3,1) => 1, (4,0) => 0, (4,1) => 1, (5,0) => 0, (6,0) => 0, (5,1) => 1};
--nrm encodes the number of representations with multiplicity in each entry
nrm100 = new HashTable from {(7,0) => 0, (6,1) => 1, (8,0) => 0, (7,1) => 1, (9,0) => 0, (8,1) => 1, (9,1) => 1, (0,0) => 1, (0,1) => 0, (1,0) => 0, (2,0) => 0, (1,1) => 1, (2,1) => 1, (3,0) => 0, (3,1) => 1, (4,0) => 0, (4,1) => 1, (5,0) => 0, (6,0) => 0, (5,1) => 1};
--er encodes the errors in the computed multigraded Hilbert series via our Schur method in each entry
er100 = new HashTable from {(7,0) => 0, (6,1) => 0, (8,0) => 0, (7,1) => 0, (9,0) => 0, (8,1) => 0, (9,1) => 0, (0,0) => 0, (0,1) => 0, (1,0) => 0, (2,0) => 0, (1,1) => 0, (2,1) => 0, (3,0) => 0, (3,1) => 0, (4,0) => 0, (4,1) => 0, (5,0) => 0, (6,0) => 0, (5,1) => 0};
--bs encodes the Boij-Soederberg coefficients each entry
bs100 = {3628800/1};
end;