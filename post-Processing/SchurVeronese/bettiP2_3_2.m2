--This file computes Betti tables for P^2 for d = 3 and b = 2
A := QQ[t_0,t_1,t_2];
--tb stands for Total Betti numbers
tb32 = new HashTable from {(7,0) => 0, (6,1) => 15, (5,2) => 0, (7,1) => 3, (6,2) => 0, (7,2) => 0, (0,0) => 6, (1,0) => 39, (0,1) => 0, (1,1) => 0, (0,2) => 0, (2,0) => 105, (1,2) => 0, (2,1) => 0, (3,0) => 147, (4,0) => 105, (2,2) => 0, (3,1) => 0, (5,0) => 21, (4,1) => 0, (3,2) => 0, (6,0) => 0, (5,1) => 21, (4,2) => 0};
--mb stands for Multigraded Betti numbers
mb32 = new HashTable from {(7,0) => 0, (6,1) => t_0^9*t_1^8*t_2^6+t_0^9*t_1^7*t_2^7+t_0^9*t_1^6*t_2^8+t_0^8*t_1^9*t_2^6+2*t_0^8*t_1^8*t_2^7+2*t_0^8*t_1^7*t_2^8+t_0^8*t_1^6*t_2^9+t_0^7*t_1^9*t_2^7+2*t_0^7*t_1^8*t_2^8+t_0^7*t_1^7*t_2^9+t_0^6*t_1^9*t_2^8+t_0^6*t_1^8*t_2^9, (5,2) => 0, (6,2) => 0, (7,1) => t_0^9*t_1^9*t_2^8+t_0^9*t_1^8*t_2^9+t_0^8*t_1^9*t_2^9, (7,2) => 0, (0,0) => t_0^2+t_0*t_1+t_0*t_2+t_1^2+t_1*t_2+t_2^2, (1,0) => t_0^4*t_1+t_0^4*t_2+2*t_0^3*t_1^2+3*t_0^3*t_1*t_2+2*t_0^3*t_2^2+2*t_0^2*t_1^3+4*t_0^2*t_1^2*t_2+4*t_0^2*t_1*t_2^2+2*t_0^2*t_2^3+t_0*t_1^4+3*t_0*t_1^3*t_2+4*t_0*t_1^2*t_2^2+3*t_0*t_1*t_2^3+t_0*t_2^4+t_1^4*t_2+2*t_1^3*t_2^2+2*t_1^2*t_2^3+t_1*t_2^4, (0,1) => 0, (1,1) => 0, (0,2) => 0, (2,0) => t_0^6*t_1*t_2+t_0^5*t_1^3+3*t_0^5*t_1^2*t_2+3*t_0^5*t_1*t_2^2+t_0^5*t_2^3+t_0^4*t_1^4+5*t_0^4*t_1^3*t_2+6*t_0^4*t_1^2*t_2^2+5*t_0^4*t_1*t_2^3+t_0^4*t_2^4+t_0^3*t_1^5+5*t_0^3*t_1^4*t_2+9*t_0^3*t_1^3*t_2^2+9*t_0^3*t_1^2*t_2^3+5*t_0^3*t_1*t_2^4+t_0^3*t_2^5+3*t_0^2*t_1^5*t_2+6*t_0^2*t_1^4*t_2^2+9*t_0^2*t_1^3*t_2^3+6*t_0^2*t_1^2*t_2^4+3*t_0^2*t_1*t_2^5+t_0*t_1^6*t_2+3*t_0*t_1^5*t_2^2+5*t_0*t_1^4*t_2^3+5*t_0*t_1^3*t_2^4+3*t_0*t_1^2*t_2^5+t_0*t_1*t_2^6+t_1^5*t_2^3+t_1^4*t_2^4+t_1^3*t_2^5, (3,0) => t_0^7*t_1^3*t_2+t_0^7*t_1^2*t_2^2+t_0^7*t_1*t_2^3+2*t_0^6*t_1^4*t_2+4*t_0^6*t_1^3*t_2^2+4*t_0^6*t_1^2*t_2^3+2*t_0^6*t_1*t_2^4+2*t_0^5*t_1^5*t_2+6*t_0^5*t_1^4*t_2^2+9*t_0^5*t_1^3*t_2^3+6*t_0^5*t_1^2*t_2^4+2*t_0^5*t_1*t_2^5+2*t_0^4*t_1^6*t_2+6*t_0^4*t_1^5*t_2^2+11*t_0^4*t_1^4*t_2^3+11*t_0^4*t_1^3*t_2^4+6*t_0^4*t_1^2*t_2^5+2*t_0^4*t_1*t_2^6+t_0^3*t_1^7*t_2+4*t_0^3*t_1^6*t_2^2+9*t_0^3*t_1^5*t_2^3+11*t_0^3*t_1^4*t_2^4+9*t_0^3*t_1^3*t_2^5+4*t_0^3*t_1^2*t_2^6+t_0^3*t_1*t_2^7+t_0^2*t_1^7*t_2^2+4*t_0^2*t_1^6*t_2^3+6*t_0^2*t_1^5*t_2^4+6*t_0^2*t_1^4*t_2^5+4*t_0^2*t_1^3*t_2^6+t_0^2*t_1^2*t_2^7+t_0*t_1^7*t_2^3+2*t_0*t_1^6*t_2^4+2*t_0*t_1^5*t_2^5+2*t_0*t_1^4*t_2^6+t_0*t_1^3*t_2^7, (2,1) => 0, (1,2) => 0, (3,1) => 0, (2,2) => 0, (4,0) => t_0^8*t_1^4*t_2^2+t_0^8*t_1^3*t_2^3+t_0^8*t_1^2*t_2^4+t_0^7*t_1^5*t_2^2+3*t_0^7*t_1^4*t_2^3+3*t_0^7*t_1^3*t_2^4+t_0^7*t_1^2*t_2^5+2*t_0^6*t_1^6*t_2^2+4*t_0^6*t_1^5*t_2^3+7*t_0^6*t_1^4*t_2^4+4*t_0^6*t_1^3*t_2^5+2*t_0^6*t_1^2*t_2^6+t_0^5*t_1^7*t_2^2+4*t_0^5*t_1^6*t_2^3+7*t_0^5*t_1^5*t_2^4+7*t_0^5*t_1^4*t_2^5+4*t_0^5*t_1^3*t_2^6+t_0^5*t_1^2*t_2^7+t_0^4*t_1^8*t_2^2+3*t_0^4*t_1^7*t_2^3+7*t_0^4*t_1^6*t_2^4+7*t_0^4*t_1^5*t_2^5+7*t_0^4*t_1^4*t_2^6+3*t_0^4*t_1^3*t_2^7+t_0^4*t_1^2*t_2^8+t_0^3*t_1^8*t_2^3+3*t_0^3*t_1^7*t_2^4+4*t_0^3*t_1^6*t_2^5+4*t_0^3*t_1^5*t_2^6+3*t_0^3*t_1^4*t_2^7+t_0^3*t_1^3*t_2^8+t_0^2*t_1^8*t_2^4+t_0^2*t_1^7*t_2^5+2*t_0^2*t_1^6*t_2^6+t_0^2*t_1^5*t_2^7+t_0^2*t_1^4*t_2^8, (3,2) => 0, (4,1) => 0, (5,0) => t_0^9*t_1^4*t_2^4+t_0^8*t_1^5*t_2^4+t_0^8*t_1^4*t_2^5+t_0^7*t_1^6*t_2^4+t_0^7*t_1^5*t_2^5+t_0^7*t_1^4*t_2^6+t_0^6*t_1^7*t_2^4+t_0^6*t_1^6*t_2^5+t_0^6*t_1^5*t_2^6+t_0^6*t_1^4*t_2^7+t_0^5*t_1^8*t_2^4+t_0^5*t_1^7*t_2^5+t_0^5*t_1^6*t_2^6+t_0^5*t_1^5*t_2^7+t_0^5*t_1^4*t_2^8+t_0^4*t_1^9*t_2^4+t_0^4*t_1^8*t_2^5+t_0^4*t_1^7*t_2^6+t_0^4*t_1^6*t_2^7+t_0^4*t_1^5*t_2^8+t_0^4*t_1^4*t_2^9, (4,2) => 0, (5,1) => t_0^8*t_1^8*t_2^4+t_0^8*t_1^7*t_2^5+2*t_0^8*t_1^6*t_2^6+t_0^8*t_1^5*t_2^7+t_0^8*t_1^4*t_2^8+t_0^7*t_1^8*t_2^5+2*t_0^7*t_1^7*t_2^6+2*t_0^7*t_1^6*t_2^7+t_0^7*t_1^5*t_2^8+2*t_0^6*t_1^8*t_2^6+2*t_0^6*t_1^7*t_2^7+2*t_0^6*t_1^6*t_2^8+t_0^5*t_1^8*t_2^7+t_0^5*t_1^7*t_2^8+t_0^4*t_1^8*t_2^8, (6,0) => 0};
--sb represents the betti numbers as sums of Schur functors
sb32 = new HashTable from {(7,0) => {}, (6,1) => {({9,8,6},1/1)}, (5,2) => {}, (6,2) => {}, (7,1) => {({9,9,8},1/1)}, (7,2) => {}, (0,0) => {({2,0,0},1/1)}, (1,0) => {({4,1,0},1/1),({3,2,0},1/1)}, (0,1) => {}, (1,1) => {}, (0,2) => {}, (2,0) => {({6,1,1},1/1),({5,3,0},1/1),({5,2,1},1/1),({4,3,1},1/1),({3,3,2},1/1)}, (3,0) => {({7,3,1},1/1),({6,4,1},1/1),({6,3,2},1/1),({5,4,2},1/1),({5,3,3},1/1)}, (2,1) => {}, (1,2) => {}, (3,1) => {}, (2,2) => {}, (4,0) => {({8,4,2},1/1),({7,4,3},1/1),({6,6,2},1/1),({6,4,4},1/1)}, (3,2) => {}, (4,1) => {}, (5,0) => {({9,4,4},1/1)}, (4,2) => {}, (5,1) => {({8,8,4},1/1),({8,6,6},1/1)}, (6,0) => {}};
--dw encodes the dominant weights in each entry
dw32 = new HashTable from {(7,0) => {}, (6,1) => {{9,8,6}}, (5,2) => {}, (7,1) => {{9,9,8}}, (6,2) => {}, (7,2) => {}, (0,0) => {{2,0,0}}, (1,0) => {{4,1,0}}, (0,1) => {}, (1,1) => {}, (0,2) => {}, (2,0) => {{6,1,1},{5,3,0}}, (1,2) => {}, (2,1) => {}, (3,0) => {{7,3,1}}, (4,0) => {{8,4,2}}, (2,2) => {}, (3,1) => {}, (5,0) => {{9,4,4}}, (4,1) => {}, (3,2) => {}, (6,0) => {}, (5,1) => {{8,8,4}}, (4,2) => {}};
--lw encodes the lex leading weight in each entry
lw32 = new HashTable from {(7,0) => {}, (6,1) => {9,8,6}, (5,2) => {}, (7,1) => {9,9,8}, (6,2) => {}, (7,2) => {}, (0,0) => {2,0,0}, (1,0) => {4,1,0}, (0,1) => {}, (1,1) => {}, (0,2) => {}, (2,0) => {6,1,1}, (1,2) => {}, (2,1) => {}, (3,0) => {7,3,1}, (4,0) => {8,4,2}, (2,2) => {}, (3,1) => {}, (5,0) => {9,4,4}, (4,1) => {}, (3,2) => {}, (6,0) => {}, (5,1) => {8,8,4}, (4,2) => {}};
--nr encodes the number of disctinct reprsentations in each entry
nr32 = new HashTable from {(7,0) => 0, (6,1) => 1, (5,2) => 0, (7,1) => 1, (6,2) => 0, (7,2) => 0, (0,0) => 1, (1,0) => 2, (0,1) => 0, (1,1) => 0, (0,2) => 0, (2,0) => 5, (1,2) => 0, (2,1) => 0, (3,0) => 5, (4,0) => 4, (2,2) => 0, (3,1) => 0, (5,0) => 1, (4,1) => 0, (3,2) => 0, (6,0) => 0, (5,1) => 2, (4,2) => 0};
--nrm encodes the number of representations with multiplicity in each entry
nrm32 = new HashTable from {(7,0) => 0, (6,1) => 1/1, (5,2) => 0, (7,1) => 1/1, (6,2) => 0, (7,2) => 0, (0,0) => 1/1, (1,0) => 2/1, (0,1) => 0, (1,1) => 0, (0,2) => 0, (2,0) => 5/1, (1,2) => 0, (2,1) => 0, (3,0) => 5/1, (4,0) => 4/1, (2,2) => 0, (3,1) => 0, (5,0) => 1/1, (4,1) => 0, (3,2) => 0, (6,0) => 0, (5,1) => 2/1, (4,2) => 0};
--er encodes the errors in the computed multigraded Hilbert series via our Schur method in each entry
er32 = new HashTable from {(7,0) => 0, (6,1) => 0, (5,2) => 0, (7,1) => 0, (6,2) => 0, (7,2) => 0, (0,0) => 0, (1,0) => 0, (0,1) => 0, (1,1) => 0, (0,2) => 0, (2,0) => 0, (1,2) => 0, (2,1) => 0, (3,0) => 0, (4,0) => 0, (2,2) => 0, (3,1) => 0, (5,0) => 0, (4,1) => 0, (3,2) => 0, (6,0) => 0, (5,1) => 0, (4,2) => 0};
--bs encodes the Boij-Soederberg coefficients each entry
bs32 = {15120/1,30240/1};
end;