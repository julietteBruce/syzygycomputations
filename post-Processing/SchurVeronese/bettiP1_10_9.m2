--This file computes Betti tables for P^2 for d = 10 and b = 9
A := QQ[t_0,t_1,t_2];
--tb stands for Total Betti numbers
tb109 = new HashTable from {(7,0) => 360, (6,1) => 0, (8,0) => 90, (7,1) => 0, (9,0) => 10, (8,1) => 0, (9,1) => 0, (0,0) => 10, (0,1) => 0, (1,0) => 90, (2,0) => 360, (1,1) => 0, (2,1) => 0, (3,0) => 840, (3,1) => 0, (4,0) => 1260, (4,1) => 0, (5,0) => 1260, (6,0) => 840, (5,1) => 0};
--mb stands for Multigraded Betti numbers
mb109 = new HashTable from {(7,0) => t_0^51*t_1^28+2*t_0^50*t_1^29+4*t_0^49*t_1^30+6*t_0^48*t_1^31+9*t_0^47*t_1^32+12*t_0^46*t_1^33+16*t_0^45*t_1^34+20*t_0^44*t_1^35+24*t_0^43*t_1^36+27*t_0^42*t_1^37+29*t_0^41*t_1^38+30*t_0^40*t_1^39+30*t_0^39*t_1^40+29*t_0^38*t_1^41+27*t_0^37*t_1^42+24*t_0^36*t_1^43+20*t_0^35*t_1^44+16*t_0^34*t_1^45+12*t_0^33*t_1^46+9*t_0^32*t_1^47+6*t_0^31*t_1^48+4*t_0^30*t_1^49+2*t_0^29*t_1^50+t_0^28*t_1^51, (6,1) => 0, (7,1) => 0, (8,0) => t_0^53*t_1^36+2*t_0^52*t_1^37+3*t_0^51*t_1^38+4*t_0^50*t_1^39+5*t_0^49*t_1^40+6*t_0^48*t_1^41+7*t_0^47*t_1^42+8*t_0^46*t_1^43+9*t_0^45*t_1^44+9*t_0^44*t_1^45+8*t_0^43*t_1^46+7*t_0^42*t_1^47+6*t_0^41*t_1^48+5*t_0^40*t_1^49+4*t_0^39*t_1^50+3*t_0^38*t_1^51+2*t_0^37*t_1^52+t_0^36*t_1^53, (8,1) => 0, (9,0) => t_0^54*t_1^45+t_0^53*t_1^46+t_0^52*t_1^47+t_0^51*t_1^48+t_0^50*t_1^49+t_0^49*t_1^50+t_0^48*t_1^51+t_0^47*t_1^52+t_0^46*t_1^53+t_0^45*t_1^54, (9,1) => 0, (0,0) => t_0^9+t_0^8*t_1+t_0^7*t_1^2+t_0^6*t_1^3+t_0^5*t_1^4+t_0^4*t_1^5+t_0^3*t_1^6+t_0^2*t_1^7+t_0*t_1^8+t_1^9, (0,1) => 0, (1,0) => t_0^18*t_1+2*t_0^17*t_1^2+3*t_0^16*t_1^3+4*t_0^15*t_1^4+5*t_0^14*t_1^5+6*t_0^13*t_1^6+7*t_0^12*t_1^7+8*t_0^11*t_1^8+9*t_0^10*t_1^9+9*t_0^9*t_1^10+8*t_0^8*t_1^11+7*t_0^7*t_1^12+6*t_0^6*t_1^13+5*t_0^5*t_1^14+4*t_0^4*t_1^15+3*t_0^3*t_1^16+2*t_0^2*t_1^17+t_0*t_1^18, (2,0) => t_0^26*t_1^3+2*t_0^25*t_1^4+4*t_0^24*t_1^5+6*t_0^23*t_1^6+9*t_0^22*t_1^7+12*t_0^21*t_1^8+16*t_0^20*t_1^9+20*t_0^19*t_1^10+24*t_0^18*t_1^11+27*t_0^17*t_1^12+29*t_0^16*t_1^13+30*t_0^15*t_1^14+30*t_0^14*t_1^15+29*t_0^13*t_1^16+27*t_0^12*t_1^17+24*t_0^11*t_1^18+20*t_0^10*t_1^19+16*t_0^9*t_1^20+12*t_0^8*t_1^21+9*t_0^7*t_1^22+6*t_0^6*t_1^23+4*t_0^5*t_1^24+2*t_0^4*t_1^25+t_0^3*t_1^26, (1,1) => 0, (3,0) => t_0^33*t_1^6+2*t_0^32*t_1^7+4*t_0^31*t_1^8+7*t_0^30*t_1^9+11*t_0^29*t_1^10+16*t_0^28*t_1^11+23*t_0^27*t_1^12+30*t_0^26*t_1^13+38*t_0^25*t_1^14+46*t_0^24*t_1^15+53*t_0^23*t_1^16+59*t_0^22*t_1^17+64*t_0^21*t_1^18+66*t_0^20*t_1^19+66*t_0^19*t_1^20+64*t_0^18*t_1^21+59*t_0^17*t_1^22+53*t_0^16*t_1^23+46*t_0^15*t_1^24+38*t_0^14*t_1^25+30*t_0^13*t_1^26+23*t_0^12*t_1^27+16*t_0^11*t_1^28+11*t_0^10*t_1^29+7*t_0^9*t_1^30+4*t_0^8*t_1^31+2*t_0^7*t_1^32+t_0^6*t_1^33, (2,1) => 0, (4,0) => t_0^39*t_1^10+2*t_0^38*t_1^11+4*t_0^37*t_1^12+7*t_0^36*t_1^13+12*t_0^35*t_1^14+18*t_0^34*t_1^15+26*t_0^33*t_1^16+35*t_0^32*t_1^17+46*t_0^31*t_1^18+57*t_0^30*t_1^19+68*t_0^29*t_1^20+78*t_0^28*t_1^21+87*t_0^27*t_1^22+93*t_0^26*t_1^23+96*t_0^25*t_1^24+96*t_0^24*t_1^25+93*t_0^23*t_1^26+87*t_0^22*t_1^27+78*t_0^21*t_1^28+68*t_0^20*t_1^29+57*t_0^19*t_1^30+46*t_0^18*t_1^31+35*t_0^17*t_1^32+26*t_0^16*t_1^33+18*t_0^15*t_1^34+12*t_0^14*t_1^35+7*t_0^13*t_1^36+4*t_0^12*t_1^37+2*t_0^11*t_1^38+t_0^10*t_1^39, (3,1) => 0, (5,0) => t_0^44*t_1^15+2*t_0^43*t_1^16+4*t_0^42*t_1^17+7*t_0^41*t_1^18+12*t_0^40*t_1^19+18*t_0^39*t_1^20+26*t_0^38*t_1^21+35*t_0^37*t_1^22+46*t_0^36*t_1^23+57*t_0^35*t_1^24+68*t_0^34*t_1^25+78*t_0^33*t_1^26+87*t_0^32*t_1^27+93*t_0^31*t_1^28+96*t_0^30*t_1^29+96*t_0^29*t_1^30+93*t_0^28*t_1^31+87*t_0^27*t_1^32+78*t_0^26*t_1^33+68*t_0^25*t_1^34+57*t_0^24*t_1^35+46*t_0^23*t_1^36+35*t_0^22*t_1^37+26*t_0^21*t_1^38+18*t_0^20*t_1^39+12*t_0^19*t_1^40+7*t_0^18*t_1^41+4*t_0^17*t_1^42+2*t_0^16*t_1^43+t_0^15*t_1^44, (4,1) => 0, (5,1) => 0, (6,0) => t_0^48*t_1^21+2*t_0^47*t_1^22+4*t_0^46*t_1^23+7*t_0^45*t_1^24+11*t_0^44*t_1^25+16*t_0^43*t_1^26+23*t_0^42*t_1^27+30*t_0^41*t_1^28+38*t_0^40*t_1^29+46*t_0^39*t_1^30+53*t_0^38*t_1^31+59*t_0^37*t_1^32+64*t_0^36*t_1^33+66*t_0^35*t_1^34+66*t_0^34*t_1^35+64*t_0^33*t_1^36+59*t_0^32*t_1^37+53*t_0^31*t_1^38+46*t_0^30*t_1^39+38*t_0^29*t_1^40+30*t_0^28*t_1^41+23*t_0^27*t_1^42+16*t_0^26*t_1^43+11*t_0^25*t_1^44+7*t_0^24*t_1^45+4*t_0^23*t_1^46+2*t_0^22*t_1^47+t_0^21*t_1^48};
--sb represents the betti numbers as sums of Schur functors
sb109 = new HashTable from {(7,0) => {({51,28},1)}, (6,1) => {}, (8,0) => {({53,36},1)}, (7,1) => {}, (9,0) => {({54,45},1)}, (8,1) => {}, (9,1) => {}, (0,0) => {({9,0},1)}, (0,1) => {}, (1,0) => {({18,1},1)}, (2,0) => {({26,3},1)}, (1,1) => {}, (2,1) => {}, (3,0) => {({33,6},1)}, (3,1) => {}, (4,0) => {({39,10},1)}, (4,1) => {}, (5,0) => {({44,15},1)}, (6,0) => {({48,21},1)}, (5,1) => {}};
--dw encodes the dominant weights in each entry
dw109 = new HashTable from {(7,0) => {{51,28}}, (6,1) => {}, (8,0) => {{53,36}}, (7,1) => {}, (9,0) => {{54,45}}, (8,1) => {}, (9,1) => {}, (0,0) => {{9,0}}, (0,1) => {}, (1,0) => {{18,1}}, (2,0) => {{26,3}}, (1,1) => {}, (2,1) => {}, (3,0) => {{33,6}}, (3,1) => {}, (4,0) => {{39,10}}, (4,1) => {}, (5,0) => {{44,15}}, (6,0) => {{48,21}}, (5,1) => {}};
--lw encodes the lex leading weight in each entry
lw109 = new HashTable from {(7,0) => {51,28}, (6,1) => {}, (8,0) => {53,36}, (7,1) => {}, (9,0) => {54,45}, (8,1) => {}, (9,1) => {}, (0,0) => {9,0}, (0,1) => {}, (1,0) => {18,1}, (2,0) => {26,3}, (1,1) => {}, (2,1) => {}, (3,0) => {33,6}, (3,1) => {}, (4,0) => {39,10}, (4,1) => {}, (5,0) => {44,15}, (6,0) => {48,21}, (5,1) => {}};
--nr encodes the number of disctinct reprsentations in each entry
nr109 = new HashTable from {(7,0) => 1, (6,1) => 0, (8,0) => 1, (7,1) => 0, (9,0) => 1, (8,1) => 0, (9,1) => 0, (0,0) => 1, (0,1) => 0, (1,0) => 1, (2,0) => 1, (1,1) => 0, (2,1) => 0, (3,0) => 1, (3,1) => 0, (4,0) => 1, (4,1) => 0, (5,0) => 1, (6,0) => 1, (5,1) => 0};
--nrm encodes the number of representations with multiplicity in each entry
nrm109 = new HashTable from {(7,0) => 1, (6,1) => 0, (8,0) => 1, (7,1) => 0, (9,0) => 1, (8,1) => 0, (9,1) => 0, (0,0) => 1, (0,1) => 0, (1,0) => 1, (2,0) => 1, (1,1) => 0, (2,1) => 0, (3,0) => 1, (3,1) => 0, (4,0) => 1, (4,1) => 0, (5,0) => 1, (6,0) => 1, (5,1) => 0};
--er encodes the errors in the computed multigraded Hilbert series via our Schur method in each entry
er109 = new HashTable from {(7,0) => 0, (6,1) => 0, (8,0) => 0, (7,1) => 0, (9,0) => 0, (8,1) => 0, (9,1) => 0, (0,0) => 0, (0,1) => 0, (1,0) => 0, (2,0) => 0, (1,1) => 0, (2,1) => 0, (3,0) => 0, (3,1) => 0, (4,0) => 0, (4,1) => 0, (5,0) => 0, (6,0) => 0, (5,1) => 0};
--bs encodes the Boij-Soederberg coefficients each entry
bs109 = {3628800/1};
end;