--This file computes Betti tables for P^2 for d = 10 and b = 5
A := QQ[t_0,t_1,t_2];
--tb stands for Total Betti numbers
tb105 = new HashTable from {(7,0) => 0, (6,1) => 120, (8,0) => 0, (7,1) => 90, (9,0) => 0, (8,1) => 30, (9,1) => 4, (0,0) => 6, (0,1) => 0, (1,0) => 50, (2,0) => 180, (1,1) => 0, (2,1) => 0, (3,0) => 360, (3,1) => 0, (4,0) => 420, (4,1) => 0, (5,0) => 252, (6,0) => 0, (5,1) => 0};
--mb stands for Multigraded Betti numbers
mb105 = new HashTable from {(7,0) => 0, (6,1) => t_0^48*t_1^27+t_0^47*t_1^28+2*t_0^46*t_1^29+3*t_0^45*t_1^30+4*t_0^44*t_1^31+5*t_0^43*t_1^32+7*t_0^42*t_1^33+8*t_0^41*t_1^34+9*t_0^40*t_1^35+10*t_0^39*t_1^36+10*t_0^38*t_1^37+10*t_0^37*t_1^38+10*t_0^36*t_1^39+9*t_0^35*t_1^40+8*t_0^34*t_1^41+7*t_0^33*t_1^42+5*t_0^32*t_1^43+4*t_0^31*t_1^44+3*t_0^30*t_1^45+2*t_0^29*t_1^46+t_0^28*t_1^47+t_0^27*t_1^48, (7,1) => t_0^51*t_1^34+2*t_0^50*t_1^35+3*t_0^49*t_1^36+4*t_0^48*t_1^37+5*t_0^47*t_1^38+6*t_0^46*t_1^39+7*t_0^45*t_1^40+8*t_0^44*t_1^41+9*t_0^43*t_1^42+9*t_0^42*t_1^43+8*t_0^41*t_1^44+7*t_0^40*t_1^45+6*t_0^39*t_1^46+5*t_0^38*t_1^47+4*t_0^37*t_1^48+3*t_0^36*t_1^49+2*t_0^35*t_1^50+t_0^34*t_1^51, (8,0) => 0, (8,1) => t_0^53*t_1^42+2*t_0^52*t_1^43+3*t_0^51*t_1^44+3*t_0^50*t_1^45+3*t_0^49*t_1^46+3*t_0^48*t_1^47+3*t_0^47*t_1^48+3*t_0^46*t_1^49+3*t_0^45*t_1^50+3*t_0^44*t_1^51+2*t_0^43*t_1^52+t_0^42*t_1^53, (9,0) => 0, (9,1) => t_0^54*t_1^51+t_0^53*t_1^52+t_0^52*t_1^53+t_0^51*t_1^54, (0,0) => t_0^5+t_0^4*t_1+t_0^3*t_1^2+t_0^2*t_1^3+t_0*t_1^4+t_1^5, (0,1) => 0, (1,0) => t_0^14*t_1+2*t_0^13*t_1^2+3*t_0^12*t_1^3+4*t_0^11*t_1^4+5*t_0^10*t_1^5+5*t_0^9*t_1^6+5*t_0^8*t_1^7+5*t_0^7*t_1^8+5*t_0^6*t_1^9+5*t_0^5*t_1^10+4*t_0^4*t_1^11+3*t_0^3*t_1^12+2*t_0^2*t_1^13+t_0*t_1^14, (2,0) => t_0^22*t_1^3+2*t_0^21*t_1^4+4*t_0^20*t_1^5+6*t_0^19*t_1^6+8*t_0^18*t_1^7+10*t_0^17*t_1^8+12*t_0^16*t_1^9+14*t_0^15*t_1^10+16*t_0^14*t_1^11+17*t_0^13*t_1^12+17*t_0^12*t_1^13+16*t_0^11*t_1^14+14*t_0^10*t_1^15+12*t_0^9*t_1^16+10*t_0^8*t_1^17+8*t_0^7*t_1^18+6*t_0^6*t_1^19+4*t_0^5*t_1^20+2*t_0^4*t_1^21+t_0^3*t_1^22, (1,1) => 0, (3,0) => t_0^29*t_1^6+2*t_0^28*t_1^7+4*t_0^27*t_1^8+6*t_0^26*t_1^9+9*t_0^25*t_1^10+12*t_0^24*t_1^11+16*t_0^23*t_1^12+20*t_0^22*t_1^13+24*t_0^21*t_1^14+27*t_0^20*t_1^15+29*t_0^19*t_1^16+30*t_0^18*t_1^17+30*t_0^17*t_1^18+29*t_0^16*t_1^19+27*t_0^15*t_1^20+24*t_0^14*t_1^21+20*t_0^13*t_1^22+16*t_0^12*t_1^23+12*t_0^11*t_1^24+9*t_0^10*t_1^25+6*t_0^9*t_1^26+4*t_0^8*t_1^27+2*t_0^7*t_1^28+t_0^6*t_1^29, (2,1) => 0, (4,0) => t_0^35*t_1^10+2*t_0^34*t_1^11+3*t_0^33*t_1^12+5*t_0^32*t_1^13+8*t_0^31*t_1^14+11*t_0^30*t_1^15+15*t_0^29*t_1^16+19*t_0^28*t_1^17+23*t_0^27*t_1^18+27*t_0^26*t_1^19+30*t_0^25*t_1^20+32*t_0^24*t_1^21+34*t_0^23*t_1^22+34*t_0^22*t_1^23+32*t_0^21*t_1^24+30*t_0^20*t_1^25+27*t_0^19*t_1^26+23*t_0^18*t_1^27+19*t_0^17*t_1^28+15*t_0^16*t_1^29+11*t_0^15*t_1^30+8*t_0^14*t_1^31+5*t_0^13*t_1^32+3*t_0^12*t_1^33+2*t_0^11*t_1^34+t_0^10*t_1^35, (3,1) => 0, (5,0) => t_0^40*t_1^15+t_0^39*t_1^16+2*t_0^38*t_1^17+3*t_0^37*t_1^18+5*t_0^36*t_1^19+7*t_0^35*t_1^20+9*t_0^34*t_1^21+11*t_0^33*t_1^22+14*t_0^32*t_1^23+16*t_0^31*t_1^24+18*t_0^30*t_1^25+19*t_0^29*t_1^26+20*t_0^28*t_1^27+20*t_0^27*t_1^28+19*t_0^26*t_1^29+18*t_0^25*t_1^30+16*t_0^24*t_1^31+14*t_0^23*t_1^32+11*t_0^22*t_1^33+9*t_0^21*t_1^34+7*t_0^20*t_1^35+5*t_0^19*t_1^36+3*t_0^18*t_1^37+2*t_0^17*t_1^38+t_0^16*t_1^39+t_0^15*t_1^40, (4,1) => 0, (5,1) => 0, (6,0) => 0};
--sb represents the betti numbers as sums of Schur functors
sb105 = new HashTable from {(7,0) => {}, (6,1) => {({48,27},1)}, (8,0) => {}, (7,1) => {({51,34},1)}, (9,0) => {}, (8,1) => {({53,42},1)}, (9,1) => {({54,51},1)}, (0,0) => {({5,0},1)}, (0,1) => {}, (1,0) => {({14,1},1)}, (2,0) => {({22,3},1)}, (1,1) => {}, (2,1) => {}, (3,0) => {({29,6},1)}, (3,1) => {}, (4,0) => {({35,10},1)}, (4,1) => {}, (5,0) => {({40,15},1)}, (6,0) => {}, (5,1) => {}};
--dw encodes the dominant weights in each entry
dw105 = new HashTable from {(7,0) => {}, (6,1) => {{48,27}}, (8,0) => {}, (7,1) => {{51,34}}, (9,0) => {}, (8,1) => {{53,42}}, (9,1) => {{54,51}}, (0,0) => {{5,0}}, (0,1) => {}, (1,0) => {{14,1}}, (2,0) => {{22,3}}, (1,1) => {}, (2,1) => {}, (3,0) => {{29,6}}, (3,1) => {}, (4,0) => {{35,10}}, (4,1) => {}, (5,0) => {{40,15}}, (6,0) => {}, (5,1) => {}};
--lw encodes the lex leading weight in each entry
lw105 = new HashTable from {(7,0) => {}, (6,1) => {48,27}, (8,0) => {}, (7,1) => {51,34}, (9,0) => {}, (8,1) => {53,42}, (9,1) => {54,51}, (0,0) => {5,0}, (0,1) => {}, (1,0) => {14,1}, (2,0) => {22,3}, (1,1) => {}, (2,1) => {}, (3,0) => {29,6}, (3,1) => {}, (4,0) => {35,10}, (4,1) => {}, (5,0) => {40,15}, (6,0) => {}, (5,1) => {}};
--nr encodes the number of disctinct reprsentations in each entry
nr105 = new HashTable from {(7,0) => 0, (6,1) => 1, (8,0) => 0, (7,1) => 1, (9,0) => 0, (8,1) => 1, (9,1) => 1, (0,0) => 1, (0,1) => 0, (1,0) => 1, (2,0) => 1, (1,1) => 0, (2,1) => 0, (3,0) => 1, (3,1) => 0, (4,0) => 1, (4,1) => 0, (5,0) => 1, (6,0) => 0, (5,1) => 0};
--nrm encodes the number of representations with multiplicity in each entry
nrm105 = new HashTable from {(7,0) => 0, (6,1) => 1, (8,0) => 0, (7,1) => 1, (9,0) => 0, (8,1) => 1, (9,1) => 1, (0,0) => 1, (0,1) => 0, (1,0) => 1, (2,0) => 1, (1,1) => 0, (2,1) => 0, (3,0) => 1, (3,1) => 0, (4,0) => 1, (4,1) => 0, (5,0) => 1, (6,0) => 0, (5,1) => 0};
--er encodes the errors in the computed multigraded Hilbert series via our Schur method in each entry
er105 = new HashTable from {(7,0) => 0, (6,1) => 0, (8,0) => 0, (7,1) => 0, (9,0) => 0, (8,1) => 0, (9,1) => 0, (0,0) => 0, (0,1) => 0, (1,0) => 0, (2,0) => 0, (1,1) => 0, (2,1) => 0, (3,0) => 0, (3,1) => 0, (4,0) => 0, (4,1) => 0, (5,0) => 0, (6,0) => 0, (5,1) => 0};
--bs encodes the Boij-Soederberg coefficients each entry
bs105 = {3628800/1};
end;